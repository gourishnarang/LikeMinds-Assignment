openapi: 3.0.0
info:
  title: User Management API
  description: API for managing user authentication, registration, profiles, and account management.
  version: 1.0.0
servers:
  - url: https://api.example.com
    description: Production Server

paths:
  /api/auth/login:
    post:
      summary: User Login
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: securePassword123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: jwt-token-string
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        format: email
                        example: user@example.com
        '400':
          description: Bad Request (Missing required parameters)
        '401':
          description: Unauthorized (Invalid credentials)

  /api/auth/logout:
    post:
      summary: User Logout
      description: Logs out the authenticated user by invalidating the token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User logged out successfully
        '401':
          description: Unauthorized (Invalid or expired token)

  /api/auth/register:
    post:
      summary: User Registration
      description: Registers a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: securePassword123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  userId:
                    type: integer
                    example: 1
        '400':
          description: Bad Request (Invalid input data)
        '409':
          description: Conflict (Email already exists)

  /api/users/{id}:
    get:
      summary: Fetch User Profile
      description: Retrieves the details of a specific user by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    format: email
                    example: user@example.com
                  createdAt:
                    type: string
                    format: date-time
                    example: 2023-05-01T10:00:00Z
        '404':
          description: Not Found (User does not exist)

    put:
      summary: Update User Details
      description: Updates user profile information.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Updated
                email:
                  type: string
                  format: email
                  example: newemail@example.com
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User details updated successfully
        '400':
          description: Bad Request (Invalid input)
        '403':
          description: Forbidden (Unauthorized access)

    delete:
      summary: Delete User Account
      description: Permanently removes a user account.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '403':
          description: Forbidden (Unauthorized access)
        '404':
          description: Not Found (User not found)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
